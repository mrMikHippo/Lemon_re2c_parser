State 0:
          program ::= * expr
          expr ::= * expr PLUS expr
          expr ::= * expr MINUS expr
          expr ::= * INT

                           INT shift-reduce 3      expr ::= INT
                       program accept
                          expr shift        3      

State 1:
          expr ::= * expr PLUS expr
          expr ::= * expr MINUS expr
          expr ::= expr MINUS * expr
          expr ::= * INT

                           INT shift-reduce 3      expr ::= INT
                          expr shift-reduce 2      expr ::= expr MINUS expr

State 2:
          expr ::= * expr PLUS expr
          expr ::= expr PLUS * expr
          expr ::= * expr MINUS expr
          expr ::= * INT

                           INT shift-reduce 3      expr ::= INT
                          expr shift-reduce 1      expr ::= expr PLUS expr

State 3:
      (0) program ::= expr *
          expr ::= expr * PLUS expr
          expr ::= expr * MINUS expr

                             $ reduce       0      program ::= expr
                          PLUS shift        2      
                         MINUS shift        1      

----------------------------------------------------
Symbols:
The first-set of non-terminals is shown after the name.

    0: $:
    1: PLUS (precedence=1)
    2: MINUS (precedence=1)
    3: INT
    4: program: INT
    5: expr: INT
----------------------------------------------------
Syntax-only Symbols:
The following symbols never carry semantic content.

$ PLUS MINUS program
----------------------------------------------------
Rules:
   0: program ::= expr.
   1: expr ::= expr PLUS expr. [PLUS precedence=1]
   2: expr ::= expr MINUS expr. [MINUS precedence=1]
   3: expr ::= INT.
